#!/bin/bash
# Copyright Â© 2020 Collabora Ltd.
# SPDX-License-Identifier: MIT
OUTPUT_DIR="/mnt/results"
LOG_DIR="$OUTPUT_DIR/logs"
LOCKFILE="$LOG_DIR/resctl-bench.lk"

function cleanup {
  sudo rm -f /var/lib/resctl-demo/bench.json
  sudo umount "$OUTPUT_DIR" >/dev/null 2>&1 || true
  sudo rm -rf $LOCKFILE
}

# Add rust bin to the path
PATH=$HOME/.cargo/bin/:$PATH

# Make sure the results drive is unmounted on exit
trap cleanup SIGINT

# Silently unmount results usb stick if still connected
cleanup

# make sure base dir perm matches what resctl-demo would create
RD_DIR="/var/lib/resctl-demo"
sudo mkdir -p ${RD_DIR}
sudo chown root:sudo ${RD_DIR}
sudo chmod u+w,g+ws ${RD_DIR}

echo "Starting resctl-bench..."
sleep 5

# show mount failed dialog - loop until user plugs in disk
while : ; do
  sudo mkdir -p "$OUTPUT_DIR"
  sudo mount PARTLABEL=results "$OUTPUT_DIR"
  if [ $? = 0 ] ; then
    break
  fi

  dialog --clear \
    --backtitle "resctl-bench" \
    --title "Insert flasher USB" \
    --yesno "Could not mount flasher USB. Please connect flasher USB to the machine and press enter to retry.\n\nChoose no to exit to the shell." \
    20 0
  if [ $? != 0 ] ; then
    exit 1
  fi
done

# find model of drive containing rootfs
ROOT_DEV=$(findmnt -n -o SOURCE / | head -n1)
BLOCK_DEV_NAME=$(lsblk -n -d -o pkname $ROOT_DEV | head -n1)
MODEL=$(cat /sys/block/$BLOCK_DEV_NAME/device/model | head -n1)
# remove trailing spaces & replace non-alphanumeric characters with '_'
MODEL=$(echo $MODEL | sed -e 's/^[[:space:]]*//')
MODEL=$(echo $MODEL | sed 's/[^a-zA-Z0-9]/_/g')

# create the output directory
MODEL_DIR="$OUTPUT_DIR/$MODEL"
sudo mkdir -p "$MODEL_DIR"

TIMESTAMP=$(date "+%Y_%m_%d-%H_%M_%S")
FILENAME="resctl-bench-result_$TIMESTAMP"
RESULT_JSON="$MODEL_DIR/$FILENAME.json.gz"
RESULT_SUMMARY="$MODEL_DIR/$FILENAME.txt"
RESULT_PDF="$MODEL_DIR/$FILENAME.pdf"
echo "Saving result to $RESULT_JSON"

# Exit on error
set -e
sudo mkdir -p $LOG_DIR
sudo touch ${LOCKFILE}

(
  echo "Running resctl $RESULT_JSON"
  echo "Log(terminal, dmesg, journal) will be saved to ${LOG_DIR}"
  sudo sh -c "echo ${BASHPID} > ${LOCKFILE}"

  export LOG_DUMP_FILE=${LOG_DIR}/resctl_terminal2.log
# Create benchmark using resctl-bench & convert results to PDF/TXT
  for ((i = 0; i < 10; i++)); do
    if sudo --preserve-env resctl-bench -r "$RESULT_JSON" run iocost-tune; then
      break
    fi
  done

  sudo rm -rf $LOCKFILE
  sudo resctl-bench -r "$RESULT_JSON" format iocost-tune:pdf=$RESULT_PDF >/dev/null
  sudo resctl-bench -r "$RESULT_JSON" format | sudo tee "$RESULT_SUMMARY" >/dev/null

  echo "resctl-bench finshed successfully!"
  echo "Results saved to USB stick as $MODEL/$FILENAME"
) &

(
  while [[ -f "$LOCKFILE" ]]; do
    if [[ -s $LOCKFILE ]]; then
      sleep 1  # randomly choosen
      sudo sh -c "dmesg > $LOG_DIR/resctl_kernel.log"
      sudo sh -c "journalctl -b > $LOG_DIR/resctl_journal.log"
    fi
  done
) &

wait

cleanup
