name: Build resctl-demo images
on:
  pull_request:
  push:
  # Build at 04:00am every Monday
  schedule:
    - cron: "0 4 * * 1"
  workflow_dispatch:
    inputs:
      resctl_demo_src:
        type: choice
        description: resctl-demo source
        options:
        - crates.io
        - git HEAD

jobs:
  build_image:
    strategy:
      fail-fast: false
      matrix:
        variant:
          - resctl-demo
          - resctl-demo-meta
    name: Build ${{ matrix.variant }} image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y debian-archive-keyring \
                                  debos \
                                  libostree-dev \
                                  qemu-utils \
                                  pigz

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.18.0'

      - name: Install debos from source
        run: |
          go install github.com/go-debos/debos/cmd/debos@main
          sudo -H ln -sf $HOME/go/bin/debos /usr/bin/debos

      - name: Download kernel
        uses: dawidd6/action-download-artifact@v3
        with:
          repo: iocost-benchmark/resctl-demo-linux
          branch: resctl-demo
          workflow: ci.yaml
          workflow_conclusion: success
          path: debs/

      - name: Move kernel into the correct place
        run: |
          mv debs/resctl-demo-kernel/* debs/
          find debs

      - name: Create output directory
        run: mkdir out

      - name: Generate version
        id: version
        run: echo "version=$(date '+%Y%m%d.%H%M%S').${{ matrix.variant }}.$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Save version in outputs directory
        run: echo ${{ steps.version.outputs.version }} > out/version.txt

      # ospack
      - name: Build ospack
        run: sudo debos --disable-fakemachine --artifactdir=out
             --template-var=variant:${{ matrix.variant }}
             --template-var=version:"${{ steps.version.outputs.version }}"
             --template-var="resctl_demo_src:${{ github.event.inputs.resctl_demo_src }}"
             --template-var=kernel_branch:debs
             --scratchsize=16G
             resctl-demo-ospack.yaml

      # efi image
      - name: Build ${{ matrix.variant }}-image-efiboot
        run: |
          sudo debos --disable-fakemachine --artifactdir=out --template-var=variant:${{ matrix.variant }} --template-var=version:"${{ steps.version.outputs.version }}" resctl-demo-image-efiboot.yaml

      - name: Publish ${{ matrix.variant }}-image-efiboot
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.variant }}-image-efiboot
          path: |
            out/${{ matrix.variant }}-image-efiboot.img.bmap
            out/${{ matrix.variant }}-image-efiboot.img.gz.sha256
            out/${{ matrix.variant }}-image-efiboot.img.gz
            out/version.txt
          if-no-files-found: error


      # efi flasher
      - name: Build ${{ matrix.variant }}-flasher-efiboot
        run: |
          sudo debos --disable-fakemachine --artifactdir=out --template-var=variant:${{ matrix.variant }} --template-var=version:"${{ steps.version.outputs.version }}" --template-var=kernel_branch:debs resctl-demo-flasher-efiboot.yaml

      - name: Publish ${{ matrix.variant }}-flasher-efiboot
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.variant }}-flasher-efiboot
          path: |
            out/${{ matrix.variant }}-flasher-efiboot.img.bmap
            out/${{ matrix.variant }}-flasher-efiboot.img.gz.sha256
            out/${{ matrix.variant }}-flasher-efiboot.img.gz
            out/version.txt
          if-no-files-found: error


      # legacyboot image
      - name: Build ${{ matrix.variant }}-image-legacyboot
        if: matrix.variant == 'resctl-demo'
        run: sudo debos --disable-fakemachine --artifactdir=out --template-var=variant:${{ matrix.variant }} --template-var=version:"${{ steps.version.outputs.version }}" resctl-demo-image-legacyboot.yaml

      - name: Publish ${{ matrix.variant }}-image-legacyboot
        if: matrix.variant == 'resctl-demo'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.variant }}-image-legacyboot
          path: |
            out/${{ matrix.variant }}-image-legacyboot.img.bmap
            out/${{ matrix.variant }}-image-legacyboot.img.gz.sha256
            out/${{ matrix.variant }}-image-legacyboot.img.gz
            out/version.txt
          if-no-files-found: error
