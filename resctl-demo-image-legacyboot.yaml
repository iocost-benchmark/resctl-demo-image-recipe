{{ $variant := or .variant "resctl-demo" }}
{{ $ospack := or .ospack (printf "%s-ospack" $variant) }}
{{ $image := or .image (printf "%s-image-legacyboot" $variant)  }}
{{ $imagesize := or .imagesize "32GB" }}
{{ $cmdline := or .cmdline "root=LABEL=system console=tty0 console=ttyS0,115200n1 rootwait fsck.mode=auto fsck.repair=yes systemd.unified_cgroup_hierarchy=1 mem=16G" }}
{{ $pack := or .pack "true" }}

architecture: amd64

actions:
  - action: recipe
    recipe: check-variant.yaml
    variables:
      variant: {{ $variant }}

  - action: image-partition
    imagename: {{ $image }}.img
    imagesize: {{ $imagesize }}
    partitiontype: msdos
    mountpoints:
      - mountpoint: /
        partition: system
        options:
          - rw
          - discard=async
      - mountpoint: /boot
        partition: boot
    partitions:
      - name: boot
        fs: vfat
        start: 2048s
        end: 256M
        flags: [ boot ]
      - name: system
        fs: btrfs
        start: 256M
        end: 100%

  - action: filesystem-deploy
    description: Deploy onto image
    append-kernel-cmdline: {{ $cmdline }}

  - action: unpack
    file: {{ $ospack }}.tar.gz

  - action: overlay
    description: Copy {{ $ospack }}.tar.gz into image
    source: out/{{ $ospack }}.tar.gz
    destination: resctl-demo-root.tar.gz

  - action: run
    description: Mount rootfs by LABEL instead of UUID
    label: sed
    command: |
      # The first UUID will be from the image, the second UUID will be the root partition
      UUID=$(blkid -o export ${IMAGE}* | grep "^UUID=" | sed -n 2p)
      sed -i "s/${UUID}/LABEL=system/g" ${ROOTDIR}/etc/fstab

  - action: run
    description: Setup bootloader
    label: scripts/setup-bootloader.sh
    chroot: true
    script: scripts/setup-bootloader.sh "i386-pc" "{{ $cmdline }}"

  - action: run
    description: Examine disk size
    chroot: true
    command: df -h / /boot

{{ if eq $pack "true" }}
  - action: run
    description: Convert {{ $image }}.img to {{ $image }}.vmdk
    postprocess: true
    command: qemu-img convert -f raw -O vmdk -o subformat=streamOptimized "$ARTIFACTDIR/{{ $image }}.img" "$ARTIFACTDIR/{{ $image }}.vmdk"

  - action: run
    description: Create block map for {{ $image }}.img
    postprocess: true
    command: bmaptool create "$ARTIFACTDIR/{{ $image }}.img" > "$ARTIFACTDIR/{{ $image }}.img.bmap"

  - action: run
    description: Compress {{ $image }}.img
    postprocess: true
    command: pigz -f  "$ARTIFACTDIR/{{ $image }}.img"

  - action: run
    description: Checksum for {{ $image }}.img.gz
    postprocess: true
    command: sha256sum "$ARTIFACTDIR/{{ $image }}.img.gz" > "$ARTIFACTDIR/{{ $image }}.img.gz.sha256"
{{ end }}
